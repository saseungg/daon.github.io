{"componentChunkName":"component---src-templates-blog-post-js","path":"/project/image-resizing/","result":{"data":{"site":{"siteMetadata":{"title":"Daon's Dev Log","author":"saseungg","siteUrl":"https://daon.pro","comment":{"disqusShortName":"","utterances":"saseungg/blog"}}},"markdownRemark":{"id":"162b28c2-5190-5d3a-a9b0-c4fdfa30ed8c","excerpt":"을 이용해서 이미지를 업로드하고 createObjectUrl을 이용해서 preview 화면을 보여주는 모습이다. mutiple 속성을 추가해서 여러장의 이미지를 업로드할 수 있도록 구현했는데 화면에 렌더링하는 데 로딩이 걸리는 문제가 있었다. 또한 전부 로딩될 때까지 화면이 blocking…","html":"<p><img src=\"https://velog.velcdn.com/images/saseungg/post/62f809cf-cd9e-418d-aa09-92a8d1c0b0eb/image.gif\"></p>\n<p><code class=\"language-text\">&lt;input type=\"file\"></code>을 이용해서 이미지를 업로드하고 createObjectUrl을 이용해서 preview 화면을 보여주는 모습이다.</p>\n<p>mutiple 속성을 추가해서 여러장의 이미지를 업로드할 수 있도록 구현했는데 화면에 렌더링하는 데 로딩이 걸리는 문제가 있었다. 또한 전부 로딩될 때까지 화면이 blocking 되고 있었다.</p>\n<h2 id=\"이미지-최적화\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"이미지 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 최적화?</h2>\n<p>이미지가 화면에 표시되기까지 시간이 걸리는 이유가 무엇일까? 원인은 업로드되는 이미지가 원본 이미지 사이즈 그대로 저장되서 화면에 표시되기 때문이다.</p>\n<p>이때부터 난 이미지 최적화에 대해서 알아보기 시작했다.\n이미지를 최적화하는 방법은 여러가지이다.</p>\n<p>이미지 최적화에 대해서 찾아봤을 때 나오는 방법들은 아래와 같다.</p>\n<ol>\n<li>이미지 CDN : 파라미터를 이용해 이미지 사이즈를 조절하는 방법\n-> 이럴경우는 서버에서 api를 이용해 이미지를 받아올 경우 사용하는 방법인데 지금의 경우에는 클라이언트 측에서 이미지 사이즈를 조절해야하므로 패스!</li>\n<li>lazy loading : 지정한 뷰포트에 도달했을 때 처리하는 방법\n-> 업로드 즉시 전부 표시해야하고 일단 나같은 경우에는 뷰포트가 없다. lazy loading은 주로 무한 스크롤 때 사용하면 좋다.</li>\n<li>포맷 변환 : 이미지는 PNG보단 JPEG가 더 용량이 가볍고 그 둘보단 WebP 형식이 용량이 가볍다.</li>\n<li>이미지 리사이징 : 업로드 하는 파일의 용량을 줄인다.</li>\n</ol>\n<p>나는 여기서 이미지 리사이징 방법을 사용하기로 했다.</p>\n<h2 id=\"이미지-업로드-구현\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%A1%9C%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-label=\"이미지 업로드 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 업로드 구현</h2>\n<p>먼저 간단한 예제를 활용해서 이미지 사이즈를 줄여보겠다.\ninput으로 이미지를 업로드해서 preview를 보여주는 로직이다.</p>\n<p>fileReader로도 사용해보고 싶어서 createObjectUrl이 아닌 fileReader로 구현해봤다. 둘의 차이점도 있는데 나중에 정리해서 글을 올려볼까 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>image<span class=\"token punctuation\">,</span> setImages<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">previewUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleImageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setImages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">previewUrl</span><span class=\"token operator\">:</span> reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'원본 파일 크기: '</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token string\">'KB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"layout\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>이미지 업로드<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"file\"</span> accept<span class=\"token operator\">=</span><span class=\"token string\">\"image/*\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleImageChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>image<span class=\"token punctuation\">.</span>previewUrl <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>image<span class=\"token punctuation\">.</span>previewUrl<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"이미지 프리뷰\"</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">400</span><span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">400</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/saseungg/post/866022da-0702-46e7-bd51-84c58003a75f/image.png\"></p>\n<p><img src=\"https://velog.velcdn.com/images/saseungg/post/3efb8c64-1ca4-46e0-8b5b-1415c14ed651/image.png\"></p>\n<p>콘솔을 확인해보면 원본 사이즈는 1569KB이고,\n네트워크 창을 확인해서 이미지 파일을 더블 클릭해보면 원본 사이즈 그대로 다운이 되는 것을 볼 수 있다.</p>\n<p>우리가 화면에서 보여줄 이미지 사이즈는 가로,세로 400px이다. 원본 사이즈를 그대로 다운 받을 필요는 없다.</p>\n<p>지금부터 우리가 할 건 browser-image-compression을 이용해서 이미지 사이즈를 조절할 것이다.</p>\n<h2 id=\"이미지-리사이징\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95\" aria-label=\"이미지 리사이징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 리사이징</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> imageCompression <span class=\"token keyword\">from</span> <span class=\"token string\">'browser-image-compression'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>image<span class=\"token punctuation\">,</span> setImage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">previewUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleImageChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> originalFile <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 압축 설정</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">maxWidthOrHeight</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 최대 너비 또는 높이 (픽셀)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> compressedFile <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">imageCompression</span><span class=\"token punctuation\">(</span>originalFile<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'원본 파일 크기: '</span> <span class=\"token operator\">+</span> originalFile<span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token string\">'KB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'압축된 파일 크기: '</span> <span class=\"token operator\">+</span> compressedFile<span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token string\">'KB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>compressedFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 압축된 파일로 변경</span>\n\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> compressedFile<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">previewUrl</span><span class=\"token operator\">:</span> reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 압축된 이미지로 변경</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"layout\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>이미지 업로드 및 압축<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"file\"</span> accept<span class=\"token operator\">=</span><span class=\"token string\">\"image/*\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleImageChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>image<span class=\"token punctuation\">.</span>previewUrl <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>image<span class=\"token punctuation\">.</span>previewUrl<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"이미지 프리뷰\"</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">400</span><span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">400</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/saseungg/post/6aa05182-53c1-4e4b-b0f8-520f1b3ecb18/image.png\">\n<img src=\"https://velog.velcdn.com/images/saseungg/post/09b21354-86f4-44c5-ac3e-978895b4a0c4/image.png\"></p>\n<p>이미지를 다운받는 시간이 32초에서 5초로 줄었으며, 이미지 사이즈도 확연히 줄어들었다. </p>\n<p>Preview에서는 이 차이가 크게 영향이 없어보일지라도 업로드하는 이미지들이 쌓여 저장된 이미지들을 api를 이용해서 불러올 때 리사이징하고 압축된 파일들이 렌더링 속도에 큰 영향을 미칠 것이다.</p>\n<p>이렇게 이미지 리사이징를 통해 웹 애플리케이션의 성능을 향상시킬 수 있다.</p>","frontmatter":{"title":"✨ 이미지 업로드 성능 최적화: 브라우저 내 이미지 리사이징","date":"October 22, 2023"}}},"pageContext":{"slug":"/project/image-resizing/","previous":{"fields":{"slug":"/project/msw/"},"frontmatter":{"title":"👾 MSW로 목데이터 만들기"}},"next":{"fields":{"slug":"/tip/node-version/"},"frontmatter":{"title":"📦 nvm으로 노드 버전관리 자동화하기"}}}},"staticQueryHashes":["3128451518","767493094"]}